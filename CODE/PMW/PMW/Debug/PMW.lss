
PMW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000aa  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000130  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000171  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000f2  00000000  00000000  00000305  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000171  00000000  00000000  000003f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00000568  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  00000732  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000751  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_init>:
#include <util/delay.h>

void PWM_init()
{
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
  6c:	89 e6       	ldi	r24, 0x69	; 105
  6e:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
  70:	bb 9a       	sbi	0x17, 3	; 23
  72:	08 95       	ret

00000074 <main>:

int main ()
{
	unsigned char duty;
	
	PWM_init();
  74:	0e 94 36 00 	call	0x6c	; 0x6c <PWM_init>

	while (1)
	{
		for(duty=0; duty<255; duty++)
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	89 2f       	mov	r24, r25
		{
			OCR0=duty;  /*increase the LED light intensity*/
  7c:	8c bf       	out	0x3c, r24	; 60
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7e:	e3 ec       	ldi	r30, 0xC3	; 195
  80:	f9 e0       	ldi	r31, 0x09	; 9
  82:	31 97       	sbiw	r30, 0x01	; 1
  84:	f1 f7       	brne	.-4      	; 0x82 <main+0xe>
  86:	00 c0       	rjmp	.+0      	; 0x88 <main+0x14>
  88:	00 00       	nop
	
	PWM_init();

	while (1)
	{
		for(duty=0; duty<255; duty++)
  8a:	8f 5f       	subi	r24, 0xFF	; 255
  8c:	8f 3f       	cpi	r24, 0xFF	; 255
  8e:	b1 f7       	brne	.-20     	; 0x7c <main+0x8>
			OCR0=duty;  /*increase the LED light intensity*/
			_delay_ms(10);
		}
		for(duty=255; duty>1; duty--)
		{
			OCR0=duty;  /*decrease the LED light intensity*/
  90:	8c bf       	out	0x3c, r24	; 60
  92:	e3 ec       	ldi	r30, 0xC3	; 195
  94:	f9 e0       	ldi	r31, 0x09	; 9
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x22>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x28>
  9c:	00 00       	nop
		for(duty=0; duty<255; duty++)
		{
			OCR0=duty;  /*increase the LED light intensity*/
			_delay_ms(10);
		}
		for(duty=255; duty>1; duty--)
  9e:	81 50       	subi	r24, 0x01	; 1
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	b1 f7       	brne	.-20     	; 0x90 <main+0x1c>
  a4:	ea cf       	rjmp	.-44     	; 0x7a <main+0x6>

000000a6 <_exit>:
  a6:	f8 94       	cli

000000a8 <__stop_program>:
  a8:	ff cf       	rjmp	.-2      	; 0xa8 <__stop_program>
